import {basename, dirname} from 'path';

import Module from './Module';

import {merge} from './utility';

const Array_proto = Array.prototype;


/**
 * Package to be bundled
 */
export default  class Package {
    /**
     * @param {string}  path         - The entry file path of this package
     *                                 (relative to `process.cwd()`)
     * @param {boolean} [includeAll] - Include NPM modules in the final bundle
     * @param {boolean} [noLog]      - Disable log output
     */
    constructor(path, includeAll, noLog) {
        /**
         * Module name of this bundled package
         *
         * @type {string}
         */
        this.name = basename( path );

        /**
         * The root path of this package (relative to `process.cwd()`)
         *
         * @type {string}
         */
        this.base = dirname( path );

        /**
         * Whether include NPM modules in the final bundle
         *
         * @type {boolean}
         */
        this.includeAll = includeAll;

        /**
         * Module count of this package
         *
         * @type {number}
         */
        this.length = 0;

        /**
         * Module index in this package (key for name & value for index)
         *
         * @type {Object}
         */
        this.module = { };

        /**
         * Whether show logs during the bundle process
         *
         * @type {boolean}
         */
        this.showLog = (! noLog);
    }

    /**
     * @param {string} name - Name of a module
     *
     * @return {number}
     */
    indexOf(name) {

        for (let i = 0;  this[i];  i++)  if (this[i].name === name)  return i;

        return -1;
    }

    /**
     * @protected
     *
     * @param {string} modName - Path of a module
     *
     * @return {Module} New or loaded module
     */
    register(modName) {

        const index = this.indexOf( modName );  var module;

        if (index > -1)
            module = Array_proto.splice.call(this,  index - this.length,  1)[0];
        else
            module = new Module(modName, this.base, this.includeAll);

        Array_proto.unshift.call(this, module);

        return module;
    }

    /**
     * Entry module of this package
     *
     * @type {Module}
     */
    get entry() {  return  this[this.length - 1];  }

    /**
     * @protected
     *
     * @param {Module} module
     * @param {Module} parent
     *
     * @return {boolean} Whether `module` has a circular dependency
     */
    hasCircular(module, parent) {

        parent.children.push( module );

        try {  JSON.stringify( this.entry );  } catch (error) {

            if ( error.message.includes('circular') )
                return  (!! parent.children.pop());
        }
    }

    /**
     * @protected
     *
     * @param {string} modName  - Path of a module
     * @param {Module} [parent] - Module depends `modName`
     */
    async parse(modName, parent) {

        const module = this.register( modName );

        if (parent  &&  this.hasCircular(module, parent))
            return  this.showLog && console.warn(
                `! Module "${modName}" has a circular reference`
            );

        await module.parse();

        if ( this.showLog )
            console.info(`âˆš Module "${modName}" has been bundled`);

        await Promise.all(
            module.dependencyPath.map(path  =>  this.parse(path, module))
        );
    }

    /**
     * Outside dependencies of this package
     *
     * @type {DependencyMap}
     */
    get outDependency() {

        return  this.includeAll  ?  [ ]  :  Object.assign(
            ... Array.from(this,  module => module.dependency.outside)
        );
    }

    /**
     * @protected
     *
     * @param {function(modName: string[], varName: string[]): string} bundler
     *
     * @return {string} Bundled source with UMD wrapper
     */
    wrap(bundler) {

        const outside = this.outDependency;

        const modName = Object.keys( outside ), varName = Object.values( outside );

        return `
//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('${this.name}', ${JSON.stringify( modName )}, factory);
    else if (typeof module === 'object')
        return  module.exports = factory(${modName.map(name => `require('${name}')`)});
    else
        return  this.${this.name} = factory(${modName.map(name => `this.${name}`)});

})(${bundler(modName, varName)});`.trim();
    }

    /**
     * @return {string} Source code of this package
     */
    async bundle() {

        await this.parse(`./${this.name}`);

        return  this.wrap((modName, varName) => `function (${varName}) {

    var module = {
        ${Array.from(
        this,  item => `'${item.name}':  {exports: { }}`
    ).concat(
        modName.map((name, index)  =>  `'${name}':  {exports: ${varName[index]}}`)
    ).join(',\n        ')}
    };

${merge}

    function _require_(base, path) {

        return module[
            /^\\w/.test( path )  ?  path  :  ('./' + merge(base, path))
        ].exports;
    }

    var require = _require_.bind(null, './');

${Array.from(this,  item => item.source).join('\n\n')}

    ${Array.from(this,  item => `module['${item.name}'].exports = ${item.identifier}(${

        Object.keys( item.dependency.compile ).map(
            child => `require('${child}')`
        ).concat(
            `_require_.bind(null, '${item.base}')`,
            `require('${item.name}')`,
            `module['${item.name}']`
        ).join(', ')

    }) || require('${item.name}');`).join('\n\n    ')}

    return require('${this.entry.name}');
}`);
    }
}
