import Package from '../source/Package';

import {execSync} from 'child_process';

import {readFileSync, removeSync} from 'fs-extra';

var bundle_code;


/**
 * @test {Package}
 */
describe('Package bundler',  () => {

    var pack = new Package('');

    /**
     * @test {Package#register}
     */
    it('Register module',  () => {

        pack.register('a');

        pack.register('b');

        pack.register('c');

        pack.register('b');

        Array.from(pack,  module => module.name).should.be.eql(['c', 'b', 'a']);
    });

    /**
     * @test {Package#parse}
     */
    it('Parse package',  () => {

        pack = new Package('./test/example/index', null, null, true);

        pack.parse('./index');

        Array.from(pack,  module => module.name).should.be.eql([
            './c', './libs/b', './a', './index'
        ]);
    });

    /**
     * @test {Package#wrap}
     */
    it('UMD wrapper',  () => {

        pack.wrap(
            'example',
            (modName, varName)  =>
                `function (${varName}) {  ${JSON.stringify( modName )};  }`
        ).should.be.equal(`
//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('example', ["test"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory(require('test'));
    else
        return  this.example = factory(this.test);

})(function (test) {  ["test"];  });`.trim());
    });


    it('Link sources of all modules',  () => {

        pack.link().should.be.equal(`
        './c':  {
            base:        '.',
            dependency:  [],
            factory:     function (require, exports, module) {require('./libs/b');

module.exports = 'This is C';
}
        },
        './libs/b':  {
            base:        './libs',
            dependency:  [],
            factory:     function (require, exports, module) {require('../c');

module.exports = 'This is B';
}
        },
        './a':  {
            base:        '.',
            dependency:  [],
            factory:     function (require, exports, module) {require('./libs/b');

module.exports = 'This is A';
}
        },
        './index':  {
            base:        '.',
            dependency:  ["./a"],
            factory:     function (A, require, exports, module) {/* AMD module */

    var C = require('./c');

    return  {a: A, c: C, test: require('test')};
}
        }`.slice(1));
    });

    function testBundle(all) {

        bundle_code = (new Package(
            './test/example/index', all, null, true
        )).bundle();

        try {
            eval( bundle_code ).should.be.eql({
                a:     'This is A',
                c:     'This is C',
                test:  {test: 1}
            });
        } catch (error) {

            console.warn( bundle_code );  throw error;
        }
    }

    /**
     * @test {Package#bundle}
     */
    it('Bundle all dependencies',  testBundle.bind(null, true));

    /**
     * @test {Package#bundle}
     */
    it('Bundle without NPM packages',  testBundle.bind(null, false));
});


describe('Command line',  () => {

    const entry = 'node source/index test/example/index';

    it('Output to a file',  () => {

        (execSync(`${entry} test/example/build`) + '').should.be.startWith(`
√ Module "./index" has been bundled
√ Module "./a" has been bundled
√ Module "./libs/b" has been bundled
√ Module "./c" has been bundled`.trim()
        );
    });

    it(
        'Write into stdout without printing',
        ()  =>  (execSync(`${entry} -s`) + '').should.be.eql( bundle_code )
    );


    it('Replace a module by the map option',  () => {

        (execSync(`${entry} test/example/build -m /T/i:jquery`) + '')
            .should.be.startWith(`
→ Module "test" will be replaced by "jquery"
√ Module "./index" has been bundled
√ Module "./a" has been bundled
√ Module "./libs/b" has been bundled
√ Module "./c" has been bundled`.trim()
            );

        (readFileSync('test/example/build.js') + '').should.be.equal(
            bundle_code
                .replace(/test([^:(])/g, 'jquery$1')
                .replace(/('|\.)index/g, '$1build')
        );
    });


    after(() => removeSync('test/example/build.js'));
});
