import {execSync} from 'child_process';

import {readFileSync, removeSync} from 'fs-extra';

import {
    toRegExp, merge, getNPMFile, getNPMIndex, getNPMPackage
} from '../source/utility';

import Module from '../source/Module';

import Package from '../source/Package';

var bundle_code;


describe('Utility',  () => {
    /**
     * @test {toRegExp}
     */
    it('Create RegExp() from a literal string',  () => {

        toRegExp('/polyfill|ext\\//ig').should.be.eql( /polyfill|ext\//gi );

        (toRegExp('test') === undefined).should.be.true();
    });

    /**
     * @test {merge}
     */
    it('Merge module paths',  () => {

        merge('./../test//../', './example').should.be.equal('../example');
    });

    /**
     * @test {getNPMFile}
     */
    it('Get path of JS modules',  () => {

        getNPMFile('test').should.be.equal('node_modules/test.js');
    });

    /**
     * @test {getNPMIndex}
     */
    it('Get "index.js" path of a module',  () => {

        getNPMIndex('koapache/source').should.be.equal(
            'node_modules/koapache/source/index.js'
        );
    });

    /**
     * @test {getNPMPackage}
     */
    it('Get entry file path from "package.json" of a module',  () => {

        getNPMPackage('koapache').should.be.equal(
            'node_modules/koapache/source/index.js'
        );
    });
});


/**
 * @test {Module}
 */
describe('Module parser',  () => {

    var module;

    before(()  =>  (module = new Module('./index', './test/example/')).load());

    /**
     * @test {Module#parseAMD}
     */
    it('Parse AMD',  () => {

        module.parseAMD().should.be.eql( {'./a': 'A'} );

        (module + '').should.be.equal(`/* AMD module */

    var C = require('./c');

    return  {a: A, c: C, test: require('test')};
`);
    });

    /**
     * @test {Module#parseCJS}
     */
    it('Parse CommonJS',  () => {

        module.parseCJS().should.be.eql( {'./c': '_c'} );
    });

    /**
     * @test {Module#parse}
     */
    it('Parse all',  () => module.parse().should.be.equal(`

function _index(A, require, exports, module) {/* AMD module */

    var C = require('./c');

    return  {a: A, c: C, test: require('test')};
}`.trim())
    );

    /**
     * @test {Module#dependencyPath}
     */
    it('Get paths of the dependency',  () => {

        module.dependencyPath.should.be.eql( ['./a', './c'] );
    });

    /**
     * @test {Module#mapName}
     */
    it('Replace a dependency',  () => {

        module = new Module(
            './index',  './test/example/',  true,  new Map([['test', 'jquery']])
        );

        module.parse().should.be.equal(`

function _index(A, require, exports, module) {/* AMD module */

    var C = require('./c');

    return  {a: A, c: C, test: require('jquery')};
}`.trim());

        module.dependencyPath.should.be.containEql('jquery');
    });
});


/**
 * @test {Package}
 */
describe('Package bundler',  () => {

    var pack = new Package('');

    /**
     * @test {Package#register}
     */
    it('Register module',  () => {

        pack.register('a');

        pack.register('b');

        pack.register('c');

        pack.register('b');

        Array.from(pack,  module => module.name).should.be.eql(['c', 'b', 'a']);
    });

    /**
     * @test {Package#parse}
     * @test {Package#sort}
     */
    it('Parse package',  () => {

        pack = new Package('./test/example/index', null, null, true);

        pack.parse('./index');

        Array.from(
            pack.sort(),  module => ({
                name:        module.name,
                depth:       module.depth,
                referCount:  module.referCount
            })
        ).should.be.eql([
            {
                name:        './c',
                depth:       4,
                referCount:  2
            },
            {
                name:        './libs/b',
                depth:       5,
                referCount:  2
            },
            {
                name:        './a',
                depth:       2,
                referCount:  1
            },
            {
                name:        './index',
                depth:       1,
                referCount:  1
            }
        ]);
    });

    /**
     * @test {Package#wrap}
     */
    it('UMD wrapper',  () => {

        pack.wrap(
            'example',
            (modName, varName)  =>
                `function (${varName}) {  ${JSON.stringify( modName )};  }`
        ).should.be.equal(`
//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('example', ["test"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory(require('test'));
    else
        return  this.example = factory(this.test);

})(function (test) {  ["test"];  });`.trim());
    });

    function testBundle(all) {

        bundle_code = (new Package(
            './test/example/index', all, null, true
        )).bundle();

        try {
            eval( bundle_code ).should.be.eql({
                a:     'This is A',
                c:     'This is C',
                test:  {test: 1}
            });
        } catch (error) {

            console.warn( bundle_code );  throw error;
        }
    }

    /**
     * @test {Package#bundle}
     */
    it('Bundle all dependencies',  testBundle.bind(null, true));

    /**
     * @test {Package#bundle}
     */
    it('Bundle without NPM packages',  testBundle.bind(null, false));
});


describe('Command line',  () => {

    const entry = 'node source/index test/example/index';

    it('Output to a file',  () => {

        (execSync(`${entry} test/example/build`) + '').should.be.startWith(`
√ Module "./index" has been bundled
√ Module "./a" has been bundled
√ Module "./libs/b" has been bundled
√ Module "./c" has been bundled`.trim()
        );
    });

    it(
        'Write into stdout without printing',
        ()  =>  (execSync(`${entry} -s`) + '').should.be.eql( bundle_code )
    );


    it('Replace a module by the map option',  () => {

        (execSync(`${entry} test/example/build -m /T/i:jquery`) + '')
            .should.be.startWith(`
→ Module "test" will be replaced by "jquery"
√ Module "./index" has been bundled
√ Module "./a" has been bundled
√ Module "./libs/b" has been bundled
√ Module "./c" has been bundled`.trim()
            );

        (readFileSync('test/example/build.js') + '').should.be.equal(
            bundle_code
                .replace(/test([^:(])/g, 'jquery$1')
                .replace(/('|\.)index/g, '$1build')
        );
    });


    after(() => removeSync('test/example/build.js'));
});
