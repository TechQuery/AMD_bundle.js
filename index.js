#! /usr/bin/env node

console.log('');


const  Path = require('path'),  FS = require('fs'),
       Command = require('commander');


const  Package = require('./libs/Package'),  Module = require('./libs/Module'),
       Config = require('./package.json');


Command.version( Config.version ).usage('<file> [options]')
    .option(
        '-e, --external <items>',
        'Declare module names of external dependencies'
    )
    .option('-f, --filter <path>',  'Load a filter module')
    .parse( process.argv );


const  bundle = (new Package(
           'index',  Command.external && Command.external.split(',')
       )).parse(),
       out_name = process.argv[2],
       filter = Command.filter && require(
           Path.join(process.cwd(), Command.filter)
       );


var name = Path.basename( out_name ).split('.')[0],
    out_dep = {
        AMD:        bundle.getDependency(function () {

            return `'${arguments[0]}'`;
        }),
        CJS:        bundle.getDependency(function () {

            return `require('${arguments[0]}')`;
        }),
        global:     bundle.getDependency(function () {

            return `this['${arguments[0]}']`;
        }),
        factory:    bundle.getDependency(function () {

            return  Module.name2var( arguments[0] );
        })
    };

FS.writeFileSync(out_name, `
//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('${name}',${
            out_dep.AMD  ?  `  [${out_dep.AMD}], `  :  ''
        } factory);
    else if (typeof module === 'object')
        module.exports = factory(${out_dep.CJS});
    else
        this.${name} = factory(${out_dep.global});

})(function (${out_dep.factory}) {


${bundle.check().toString( filter )}
});
`.trim());