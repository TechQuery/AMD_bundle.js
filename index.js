#! /usr/bin/env node

console.info('');


const  Path = require('path'),  FS = require('fs');

const  Command = require('commander'),  Config = require('./package.json');

const  Package = require('./libs/Package'),  Module = require('./libs/Module');


Command.version( Config.version ).usage('<dir> <file> [options]')
    .arguments('<dir> <file>')
    .option(
        '-e, --external <items>',
        'Declare module names of external dependencies'
    )
    .option('-f, --filter <path>',  'Load a filter module')
    .parse( process.argv );


const bundle = new Package(
        Command.args[0],
        'index',
        Command.external && Command.external.split(',')
    ),
    out_name = Command.args[1],
    filter = Command.filter && require(
        Path.join(process.cwd(), Command.filter)
    );


var name = Path.basename( out_name ).split('.')[0],
    out_dep = {
        AMD:        bundle.getDependency(
            name => `'${name}'`
        ),
        CJS:        bundle.getDependency(
            name => `require('${name}')`
        ),
        global:     bundle.getDependency(
            name => `this['${name}']`
        ),
        factory:    bundle.getDependency(
            name  =>  Module.variableOf( name )
        )
    };

FS.writeFileSync(out_name, `
//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('${name}',${
    out_dep.AMD  ?  `  [${out_dep.AMD}], `  :  ''
} factory);
    else if (typeof module === 'object')
        module.exports = factory(${out_dep.CJS});
    else
        this.${name} = factory(${out_dep.global});

})(function (${out_dep.factory}) {


${bundle.check().toString( filter )}
});
`.trim());
